Rahmenbedingungen/Infrastruktur
* Statt die index.html im Browser auszuführen, soll nun das Projekt auf einem lokalen Webserver betrieben werden,
um mit HTTP-Requests arbeiten zu können und um mit einer realen Umgebung zu entwicklen
* Weitere Vorteile: Hot-Reload Funktion (Automatische Anzeige der Änderungen im Browser in Echtzeit)
* App.vue ist ein Single File Component mit Bereichen für Template, Script und Style
* App.vue ist die root-Component
* Der Aufruf von "npm run serve" wandelt den Vue Code in reines JavaScript um, der in allen Browsern läuft
* Komfortablere Entwicklung mit vue CLI durch npm (hiermit Einbindung von Vue, Bootstrap usw.)
* "public"-Verzeichnis ist der generierte Output zum Transport auf einen Server (nach Ausführen eines Befehls)
* "src"-Verzeichnis dient der Entwicklung des Projekts
* Das "--save" bein npm install ist die explizite Schreibweise zur Speicherung des Dependency im Projektverzeichnis und wird in der Regel automatisch bereits im Projekt gespeichert
* Babel ist ein JavaScript-Compiler (engl. JavaScript-Precompiler). Dadurch kann man die neuesten JS Features nutzen und Babel macht Sie für alle Browser (und gängigen Versionen nutzbar mit equivalenenten Implementierungen)
* Babel lässt sich über die Optionen weiter konfigurieren wie z.B. ob bestimmte polyfills genutzt werden sollen oder nicht

Learning
* Mit @import wird Boostrap in den Einstiegspunkt des Projekts geladen, um im Projekt verfügbar zu sein
* Die Tilde verweist auf das "node_modules"-Verzeichnis
* Verwendung von Import und Export von Components mit modernem JavaScript
* Alle Styles in einer Component sind standardmäßig global verfügbar!
* Mit dem Schlüsselwort "scoped" lässt sich der Style einer Component auf die Component beschränken
--> <style scoped><</style>
* Globale Style kommen in die root-Component (App.vue)
* Verwendung eines Stores für die zentrale Datenhaltung (Single Source of Truth). Alle Components bedienen sich dann an diesem Store
* 3 Komponenten eines Stores
** State = Daten, die von der Anwendung verwaltet werden (als Key-Value Paare z.B. als JSON)
** Getters = nachvollziehen welche Funktionen den State verändert haben oder Änderungen vorher validieren
** Mutations = die eigentliche Änderung der Daten
* Reactivity System von Vue.js sorgt dafür, dass Änderungen der Anwendung an alle Components automatisch weitergegeben werden (reicht bis mittelgroße Anwendungen)
* Für große Anwendungen gibt es noch das State Management Tool Vuex
* Bindung von Datenelementen aus dem Store an Components via Props
* Props mit langer Schreibweise zur Aussteuerung von Warnungen bei Nichteinhaltung (Restriktion von Datentypen, Pflichtbedingung)
* Weitere Attribute für Props (default Wert, validator -> Prüfung ob der Wert der eigenen Erwartung entspricht)
* Egal ob Attribute bei Props fehlschlagen, die Components werden trotzdem gebaut
* Vue Konzept Slots mit eigenem Tag <slot> zur Markierung eines Platzhalters, der von außen befüllt werden kann
* Bei einem Slot und klarer Zuordnung eines Templates kann ohne einen Namen gearbeitet werden
* Named Slots
** Bei mehreren Slots müssen Slots benannt werden, um die Zuordnung herzustellen. Benamung mit name=""
** Wird einem Slot kein Name gegeben, wird diesem implizit der Name "default" gegeben
* Template-Tag <template> zur Bestimmung, welches Template in welchen Slot gefüllt wird
* Directive v-slot zur benannten Befüllung eines Slots mit einem Template
* Fallback-Content: Inhalt, der im Falle eines fehlenden Inhalts angezeigt wird. Die Fallback Befüllung geschieht automatisch, da wir die Slots nicht von außen befüllt haben
* Scoped Slots bzw. Slot Props: Props, die an einen Slot weitergegeben werden. Dies macht Sinn, da weitere Components nicht unbedingt einen direkten Zugriff auf die Attribute haben könnten
* Destructuring: Verwendung einfacher Curly Braces und Benennung des gewünschten Inhalts: z.B. nur für das event-Object { event }
* Innerhalb des Destructuring's ist auch eine Umbennenung des abgerufenen Inhalts möglich, falls es z.B. semantisch besser passen sollte


Verwendete Befehle
* npm install -g @vue/cli
* npm create projectName
* npm run serve
* npm install bootstrap
* npm install --save @fortawesome/fontawesome-free

Neue Directives
* v-slot:<Name des Slots, welches befüllt werden soll>

Abkürzungen
* v-slot --> # (Doppelkreuz) --> #eventPriority="slotProps" statt v-slot:eventPriority="slotProps"
** bei default --> #default statt v-slot oder v-slot:default